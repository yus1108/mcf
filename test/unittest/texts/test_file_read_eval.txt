option casemap :none ; make the file case sensitive

.data
?0	db "Hello, Worlld! Value=%d", 10, 0   ; "Hello, World! Value=%d\n";

includelib "kernel32.lib"

int32 typedef dword		; typedef int32: dword
uint32 typedef dword	; typedef int32: unsigned dword
address typedef qword	; typedef addreess: qword

bool typedef byte		; typedef bool: byte -> bind { false = 0, true = 1 }

includelib "libcmt.lib"
printf PROTO : qword, VARARG	; extern asm func printf(format: unsigned qword, ...args) -> int32;

.data
foo		db	0				; byte		; let foo: byte = 0;

.code
boo proc								; func boo(void) -> byte { return 0; }
	xor al, al
	ret
boo endp

.data
arr		db	0, 1, 2			; byte[3]			; let arr: byte[] = { 0, 1, 2 };
arr2	db	0, 0, 0, 0, 0	; byte[5]			; let arr2: byte[5] = { 0 };
intval	dd	10				; int32 -> dword	; let intVal: int32 = 10;

.code
main proc,						; main(void) -> void {
	sub		rsp, 08h			; 16 byte alignement after call main with 8 byte
	local	message: ptr byte	; let message: byte[]
								; unused(foo, boo, arr, arr2);
	
	; message = "Hello, World! Value=%d\n";
	lea		rax, [?0]
	mov		mesaage, rax
	
	; printf(&message, intVal);

							
main endp					; }