option casemap :none
.code
?CopyMemory proc
	push rsi
	push rdi
	push rcx
	mov rsi, rcx
	mov rdi, rdx
	mov rcx, r8
?CopyMemory?L1:
	mov al, byte ptr [rsi]
	mov byte ptr [rdi], al
	inc rsi
	inc rdi
	loop ?CopyMemory?L1
	pop rcx
	pop rdi
	pop rsi
	ret
?CopyMemory endp
.data
?0 byte 72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33, 32, 86, 97, 108, 117, 101, 61, 37, 100, 10, 0
includelib "kernel32.lib"
int32 typedef dword
uint32 typedef dword
address typedef qword
bool typedef byte
false bool 0
true bool 1
includelib "libcmt.lib"
printf PROTO format:qword, args:VARARG
foo byte 0
.code
boo proc
	push rbp
	xor al, al
	pop rbp
	ret
boo endp
.data
arr byte 0, 1, 2
arr2 byte 0
intVal int32 10
.code
main proc
	push rbp
	sub rsp, 32
	sub rsp, 32
	mov r8, sizeof ?0
	lea rdx, [rsp + 32]
	lea rcx, [?0]
	call ?CopyMemory
	add rsp, 32
	mov dword ptr [rsp + 24], 0
?main_L0:
	mov eax, dword ptr [rsp + 24]
	mov ebx, 5
	cmp eax, ebx
	jl ?main_L1
	jmp ?main_L2
?main_L1:
	sub rsp, 32
	mov edx, intVal
	lea rcx, [rsp + 32]
	call printf
	add rsp, 32
	mov eax, dword ptr [rsp + 24]
	add eax, 1
	mov dword ptr [rsp + 24], eax
	jmp ?main_L0
?main_L2:
?main_L3:
?main_L4:
	sub rsp, 32
	mov edx, intVal
	lea rcx, [rsp + 32]
	call printf
	add rsp, 32
	jmp ?main_L5
	jmp ?main_L3
?main_L5:
	add rsp, 32
	pop rbp
	ret
main endp
END